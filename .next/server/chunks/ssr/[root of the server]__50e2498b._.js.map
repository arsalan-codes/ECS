{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  promptDir: './prompts',\n  plugins: [\n    googleAI({\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/sensor.ts"],"sourcesContent":["/**\n * Represents sensor data for temperature, humidity and oxygen.\n */\nexport interface SensorData {\n  /**\n   * The temperature in Celsius.\n   */\n  temperatureCelsius: number;\n  /**\n   * The humidity percentage.\n   */\n  humidity: number;\n  /**\n   * The oxygen level.\n   */\n  oxygen: number;\n}\n\n/**\n * Asynchronously retrieves sensor data.\n *\n * @returns A promise that resolves to a SensorData object containing temperature, humidity, and oxygen levels.\n */\nexport async function getSensorData(): Promise<SensorData> {\n  // TODO: Implement this by calling an API.\n  return {\n    temperatureCelsius: 25,\n    humidity: 60,\n    oxygen: 95,\n  };\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAqBM,eAAe;IACpB,0CAA0C;IAC1C,OAAO;QACL,oBAAoB;QACpB,UAAU;QACV,QAAQ;IACV;AACF","debugId":null}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-sensor-data.ts"],"sourcesContent":["// The use of the `JSON.stringify` and `JSON.parse` functions helps to maintain type safety when interacting with the language model.\n'use server';\n/**\n * @fileOverview Analyzes sensor data and recommends fan speed adjustments for optimal poultry health.\n *\n * - analyzeSensorData - A function that analyzes sensor data and returns fan speed recommendations.\n * - AnalyzeSensorDataInput - The input type for the analyzeSensorData function.\n * - AnalyzeSensorDataOutput - The return type for the analyzeSensorData function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\nimport {getSensorData} from '@/services/sensor';\nimport {FanSettings} from '@/services/fan';\n\nconst AnalyzeSensorDataInputSchema = z.object({}).describe('Empty input.');\nexport type AnalyzeSensorDataInput = z.infer<typeof AnalyzeSensorDataInputSchema>;\n\nconst AnalyzeSensorDataOutputSchema = z.object({\n  recommendedFanSpeed: z.number().describe('The recommended fan speed as a percentage.'),\n  explanation: z.string().describe('Explanation of why the fan speed is recommended.'),\n});\nexport type AnalyzeSensorDataOutput = z.infer<typeof AnalyzeSensorDataOutputSchema>;\n\nexport async function analyzeSensorData(input: AnalyzeSensorDataInput): Promise<AnalyzeSensorDataOutput> {\n  return analyzeSensorDataFlow(input);\n}\n\nconst analyzeSensorDataPrompt = ai.definePrompt({\n  name: 'analyzeSensorDataPrompt',\n  input: {\n    schema: z.object({\n      temperatureCelsius: z.number().describe('The temperature in Celsius.'),\n      humidity: z.number().describe('The humidity percentage.'),\n      oxygen: z.number().describe('The oxygen level.'),\n    }),\n  },\n  output: {\n    schema: AnalyzeSensorDataOutputSchema,\n  },\n  prompt: `You are an AI assistant that helps farm managers optimize environmental conditions for poultry health.\n\n  Analyze the sensor data provided below and recommend a fan speed (as a percentage) to ensure optimal conditions for the poultry. Include a brief explanation of your recommendation.\n\n  Sensor Data:\n  - Temperature: {{temperatureCelsius}} Celsius\n  - Humidity: {{humidity}}%\n  - Oxygen: {{oxygen}}%\n\n  Consider ideal ranges for poultry:\n  - Temperature: 18-24 Celsius\n  - Humidity: 50-70%\n  - Oxygen: > 90%\n\n  Respond with the following JSON format:\n  {\n    \"recommendedFanSpeed\": number,\n    \"explanation\": string\n  }`,\n});\n\nconst analyzeSensorDataFlow = ai.defineFlow<\n  typeof AnalyzeSensorDataInputSchema,\n  typeof AnalyzeSensorDataOutputSchema\n>({\n  name: 'analyzeSensorDataFlow',\n  inputSchema: AnalyzeSensorDataInputSchema,\n  outputSchema: AnalyzeSensorDataOutputSchema,\n},\nasync () => {\n  const sensorData = await getSensorData();\n  const {output} = await analyzeSensorDataPrompt({\n    temperatureCelsius: sensorData.temperatureCelsius,\n    humidity: sensorData.humidity,\n    oxygen: sensorData.oxygen,\n  });\n  // The schema guarantees that the output is valid JSON.\n  return output!;\n});\n\n"],"names":[],"mappings":"AAAA,qIAAqI;;;;;;AAErI;;;;;;CAMC,GAED;AACA;AAAA;AACA;;;;;;;AAGA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC;AAG3D,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,uCAAe,GAAf,kBAAkB,KAA6B;IACnE,OAAO,sBAAsB;AAC/B;AAEA,MAAM,0BAA0B,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC9C,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACxC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC9B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC9B;IACF;IACA,QAAQ;QACN,QAAQ;IACV;IACA,QAAQ,CAAC;;;;;;;;;;;;;;;;;;GAkBR,CAAC;AACJ;AAEA,MAAM,wBAAwB,2HAAA,CAAA,KAAE,CAAC,UAAU,CAGzC;IACA,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA;IACE,MAAM,aAAa,MAAM,CAAA,GAAA,yHAAA,CAAA,gBAAa,AAAD;IACrC,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,wBAAwB;QAC7C,oBAAoB,WAAW,kBAAkB;QACjD,UAAU,WAAW,QAAQ;QAC7B,QAAQ,WAAW,MAAM;IAC3B;IACA,uDAAuD;IACvD,OAAO;AACT;;;IAtDsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 424, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}